package org.apiman.client.resources;

import static org.apiman.client.GenericUtils.buildURL;
import static org.apiman.client.GenericUtils.encode;
import static org.apiman.client.GenericUtils.substitute;

import java.util.Arrays;
import java.util.HashMap;
import java.util.List;
import java.util.Map;

import org.apiman.client.AbstractApimanClient;
import org.apiman.client.domain.Plugin;
import org.apiman.client.resources.plugins.PluginsPolicyDefsClient;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Component;

import lombok.AccessLevel;
import lombok.AllArgsConstructor;
import lombok.Data;
import lombok.EqualsAndHashCode;
import lombok.Getter;
import lombok.NoArgsConstructor;
import lombok.Setter;
import lombok.ToString;

@Data
@NoArgsConstructor
@AllArgsConstructor
@ToString
@EqualsAndHashCode(callSuper=false)
@Component
@Getter(value = AccessLevel.PUBLIC)
@Setter(value = AccessLevel.PRIVATE)
public class PluginsClient extends AbstractApimanClient {
	
	private static final String AVAILABLE_PLUGINS_PATH = "/availablePlugins";
	
	@Autowired
	private PluginsPolicyDefsClient pluginsPolicyDefsClient;
	
	/* This endpoint returns a list of all plugins that have been added to the system.
	 * 
	 */
	public List<Plugin> listAllPlugins() {
		
		String url = buildURL(apimanUrl, PLUGINS_PATH);
		Plugin[] plugins = restTemplate.getForObject(encode(url), Plugin[].class);
		
		return plugins != null ? Arrays.asList(plugins) : null;
	}
	
	/* Use this endpoint to add a plugin to apiman. A plugin consists of the maven coordinates of an artifact deployed 
	 * to a remote maven repository (e.g. maven central).
	 */
	public Plugin addPlugin(Plugin plugin) {
		
		String url = buildURL(apimanUrl, PLUGINS_PATH);
		return restTemplate.postForObject(encode(url), plugin, Plugin.class);
	}
	
	/* Use this endpoint to retrieve a list of all plugins available to be installed. This list is generated by 
	 * querying all of the plugin registries configured in apiman and returning the list of plugins found in each (sorted by name). 
	 * Note that this endpoint includes all plugins, even those already installed.
	 */
	public List<Plugin> listAvailablePlugins() {
		
		String url = buildURL(apimanUrl, PLUGINS_PATH, AVAILABLE_PLUGINS_PATH);
		Plugin[] plugins = restTemplate.getForObject(encode(url), Plugin[].class);
		
		return plugins != null ? Arrays.asList(plugins) : null;
	}
	
	/* This endpoint can be used to access the full information about an apiman plugin. The plugin is retrieved using the ID 
	 * it was given when it was added. The ID information can be retrieved by listing all plugins or remembered when a plugin is first added.
	 */
	public Plugin getPluginById(String pluginId) {
		
		String url = buildURL(apimanUrl, PLUGINS_PATH, "/{pluginId}");
		Map<String, String> map = new HashMap<>();
		map.put("pluginId", pluginId);
		url = substitute(url, map);
		
		return restTemplate.getForObject(encode(url), Plugin.class);
	}
	
	/* Call this endpoint to delete a plugin.
	 * 
	 */
	public void deletePluginById(String pluginId) {
		
		String url = buildURL(apimanUrl, PLUGINS_PATH, "/{pluginId}");
		Map<String, String> map = new HashMap<>();
		map.put("pluginId", pluginId);
		url = substitute(url, map);
		
		restTemplate.delete(encode(url));
	}
}
